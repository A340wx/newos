#include "Renderer_vesa.h"
#include "assert.h"
#include <win/Color.h>

#define MIN(a, b) ((a) < (b) ? (a) : (b))

const color555 kCursorBits555 [] = {
    0x7fff,0x7fff,0x00,0x00,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,
    0x7fff,0x7fff,0x7fff,0x7fff,0x00,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,
    TRANS555COLOR,0x7fff,0x7fff,0x7fff,0x7fff,0x00,0x00,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,
    TRANS555COLOR,0x7fff,0x7fff,0x7fff,0x7fff,0x7fff,0x7fff,0x00,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,
    TRANS555COLOR,TRANS555COLOR,0x7fff,0x7fff,0x7fff,0x7fff,0x7fff,0x7fff,0x7fff,0x00,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,
    TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,0x7fff,0x7fff,0x7fff,0x7fff,0x7fff,0x7fff,0x7fff,0x00,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,
    TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,0x7fff,0x7fff,0x7fff,0x7fff,0x7fff,0x7fff,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,
    TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,0x7fff,0x7fff,0x7fff,0x7fff,0x00,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,
    TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,0x7fff,0x7fff,0x7fff,TRANS555COLOR,0x7fff,0x00,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,
    TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,0x7fff,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,0x7fff,0x00,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,
    TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,0x7fff,0x00,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,
    TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,0x7fff,0x00,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,
    TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,0x7fff,0x00,TRANS555COLOR,TRANS555COLOR,
    TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,0x7fff,0x00,TRANS555COLOR,
    TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,0x7fff,TRANS555COLOR,
    TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR,TRANS555COLOR
};

const color565 kCursorBits565 [] = {
    0xffff,0xffff,0x00,0x00,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,
    0xffff,0xffff,0xffff,0xffff,0x00,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,
    TRANS565COLOR,0xffff,0xffff,0xffff,0xffff,0x00,0x00,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,
    TRANS565COLOR,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0x00,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,
    TRANS565COLOR,TRANS565COLOR,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0x00,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,
    TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0x00,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,
    TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,
    TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,0xffff,0xffff,0xffff,0xffff,0x00,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,
    TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,0xffff,0xffff,0xffff,TRANS565COLOR,0xffff,0x00,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,
    TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,0xffff,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,0xffff,0x00,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,
    TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,0xffff,0x00,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,
    TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,0xffff,0x00,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,
    TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,0xffff,0x00,TRANS565COLOR,TRANS565COLOR,
    TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,0xffff,0x00,TRANS565COLOR,
    TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,0xffff,TRANS565COLOR,
    TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR,TRANS565COLOR
};

const color888 kCursorBits888 [] = {
    0xffffff,0xffffff,0x00,0x00,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,
    0xffffff,0xffffff,0xffffff,0xffffff,0x00,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,
    TRANS888COLOR,0xffffff,0xffffff,0xffffff,0xffffff,0x00,0x00,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,
    TRANS888COLOR,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x00,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,
    TRANS888COLOR,TRANS888COLOR,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x00,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,
    TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x00,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,
    TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,
    TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,0xffffff,0xffffff,0xffffff,0xffffff,0x00,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,
    TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,0xffffff,0xffffff,0xffffff,TRANS888COLOR,0xffffff,0x00,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,
    TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,0xffffff,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,0xffffff,0x00,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,
    TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,0xffffff,0x00,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,
    TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,0xffffff,0x00,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,
    TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,0xffffff,0x00,TRANS888COLOR,TRANS888COLOR,
    TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,0xffffff,0x00,TRANS888COLOR,
    TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,0xffffff,TRANS888COLOR,
    TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR,TRANS888COLOR
};


Renderer_vesa_555::Renderer_vesa_555(char *baseAddress, int width, int height, int bytesPerRow)
    :   Renderer_RGB555(baseAddress, width, height, bytesPerRow)
{
    fCursorX = width / 2;
    fCursorY = height / 2;
    DrawCursor();
}

const unsigned kBottom = 1;
const unsigned kTop = 2;
const unsigned kLeft = 4;
const unsigned kRight = 8;

#define clipmask(x, y, rect)        \
    ({  unsigned mask = 0;                              \
        if (x < rect.left) mask |= kLeft;           \
        else if (x > rect.right) mask |= kRight;    \
        if (y < rect.top) mask |= kTop;         \
        else if (y > rect.bottom) mask |= kBottom;  \
        mask;})

inline int vert_intersection(int x1, int y1, int x2, int y2, int x)
{
    return y1 + (y2 - y1) * (x - x1) / (x2 - x1);
}

inline int horz_intersection(int x1, int y1, int x2, int y2, int y)
{
    return x1 + (x2 - x1) * (y - y1) / (y2 - y1);
}

void Renderer_vesa_555::DrawLine(int x1, int y1, int x2, int y2, color32 color, color_space cspace)
{
    Rect cursorRect(fCursorX, fCursorY, fCursorX + 16 - 1, fCursorY + 16 - 1);
    bool invalidateCursor = true;

    int clippedX1 = x1;
    int clippedY1 = y1;
    int clippedX2 = x2;
    int clippedY2 = y2;
    unsigned point1mask = clipmask(clippedX1, clippedY1, cursorRect);
    unsigned point2mask = clipmask(clippedX2, clippedY2, cursorRect);
    while (point1mask != 0 || point2mask != 0) {
        if ((point1mask & point2mask) != 0) {
            invalidateCursor = false;
            break;
        }

        unsigned  mask = point1mask ? point1mask : point2mask;
        int x = 0;
        int y = 0;
        if (mask & kBottom) {
            y = cursorRect.bottom;
            x = horz_intersection(clippedX1, clippedY1, clippedX2, clippedY2, y);
        } else if (mask & kTop) {
            y = cursorRect.top;
            x = horz_intersection(clippedX1, clippedY1, clippedX2, clippedY2, y);
        } else if (mask & kRight) {
            x = cursorRect.right;
            y = vert_intersection(clippedX1, clippedY1, clippedX2, clippedY2, x);
        } else if (mask & kLeft) {
            x = cursorRect.left;
            y = vert_intersection(clippedX1, clippedY1, clippedX2, clippedY2, x);
        }

        if (point1mask) {
            // Clip point 1
            point1mask = clipmask(x, y, cursorRect);
            clippedX1 = x;
            clippedY1 = y;
        } else {
            // Clip point 2
            point2mask = clipmask(x, y, cursorRect);
            clippedX2 = x;
            clippedY2 = y;
        }
    }

    if (invalidateCursor)
        EraseCursor();

    Renderer_RGB555::DrawLine(x1, y1, x2, y2, color, cspace);

    if (invalidateCursor)
        DrawCursor();
}

void Renderer_vesa_555::FillRect(int x1, int y1, int x2, int y2, color32 color, color_space cspace)
{
    bool invalidateCursor = false;
    if (Rect(x1, y1, x2, y2).Intersects(Rect(fCursorX, fCursorY, fCursorX + 16 - 1,
                                        fCursorY + 16 - 1))) {
        invalidateCursor = true;
        EraseCursor();
    }

    Renderer_RGB555::FillRect(x1, y1, x2, y2, color, cspace);
    if (invalidateCursor)
        DrawCursor();
}

void Renderer_vesa_555::Blit(int x, int y, const void *image, color_space cspace, int imageWidth,
                             int imageHeight, int imageStrideWidth)
{

    bool invalidateCursor = false;
    if (Rect(x, y, x + imageWidth, y + imageHeight).Intersects(Rect(fCursorX,
            fCursorY, fCursorX + 16 - 1, fCursorY + 16 - 1))) {
        invalidateCursor = true;
        EraseCursor();
    }

    Renderer_RGB555::Blit(x, y, image, cspace, imageWidth, imageHeight, imageStrideWidth);
    if (invalidateCursor)
        DrawCursor();
}

void Renderer_vesa_555::StretchBlit(const Rect &imageRect, const Rect &displayRect, const void *image, color_space cspace,
                                    int imageStrideWidth)
{

    bool invalidateCursor = false;
    if (displayRect.Intersects(Rect(fCursorX, fCursorY, fCursorX + 16 - 1,
                                    fCursorY + 16 - 1))) {
        invalidateCursor = true;
        EraseCursor();
    }

    Renderer_RGB555::StretchBlit(imageRect, displayRect, image, cspace, imageStrideWidth);

    if (invalidateCursor)
        DrawCursor();
}

void Renderer_vesa_555::CopyRect(const Rect &source, const Rect &dest)
{
    bool invalidateCursor = false;
    Rect cursorRect(fCursorX, fCursorY, fCursorX + 16 - 1, fCursorY + 16 - 1);
    if (cursorRect.Intersects(source) || cursorRect.Intersects(dest)) {
        invalidateCursor = true;
        EraseCursor();
    }

    Renderer_RGB555::CopyRect(source, dest);
    if (invalidateCursor)
        DrawCursor();
}

void Renderer_vesa_555::SetCursorPosition(int x, int  y)
{
    EraseCursor();
    fCursorX = x;
    fCursorY = y;
    DrawCursor();
}

void Renderer_vesa_555::EraseCursor()
{
    color555 *screen_ptr = (color555 *)BufferBaseAddress() + fCursorX + fCursorY * (BufferBytesPerRow() / 2);
    color555 *saveBackground = fSavedBackground;
    int cursorDisplayWidth = MIN(16, (BufferBytesPerRow() / 2) - fCursorX);
    int cursorDisplayHeight = MIN(16, BufferHeight() - fCursorY);
    int stride = (BufferBytesPerRow() / 2) - cursorDisplayWidth;

    for (int y = 0; y < cursorDisplayHeight; y++) {
        for (int x = 0; x < cursorDisplayWidth; x++) {
            if (*saveBackground != TRANS555COLOR)
                *screen_ptr = *saveBackground;

            screen_ptr++;
            saveBackground++;
        }

        screen_ptr += stride;
        saveBackground += 16 - cursorDisplayWidth;
    }
}

void Renderer_vesa_555::DrawCursor()
{
    color555 *screen_ptr = (color555 *)BufferBaseAddress() + fCursorX + fCursorY * (BufferBytesPerRow() / 2);
    color555 *cursorImage = (color555 *)kCursorBits555;
    color555 *saveBackground = fSavedBackground;
    int cursorDisplayWidth = MIN(16, (BufferBytesPerRow() / 2) - fCursorX);
    int cursorDisplayHeight = MIN(16, BufferHeight() - fCursorY);
    int stride = (BufferBytesPerRow() / 2) - cursorDisplayWidth;

    for (int y = 0; y < cursorDisplayHeight; y++) {
        for (int x = 0; x < cursorDisplayWidth; x++) {
            if (*cursorImage != TRANS555COLOR) {
                *saveBackground = *screen_ptr;
                *screen_ptr = *cursorImage;
            } else
                *saveBackground = TRANS555COLOR;

            screen_ptr++;
            cursorImage++;
            saveBackground++;
        }

        screen_ptr += stride;
        cursorImage += 16 - cursorDisplayWidth;
        saveBackground += 16 - cursorDisplayWidth;
    }
}
